datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String        @id
  name         String?       @unique
  stories      Story[]       @relation("ProfileToStory")
  paymentLinks PaymentLink[] @relation("ProfileToPaymentLink")
  store        Store?        @relation("ProfileToStore")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Story {
  id                     String     @id @default(uuid())
  name                   String?
  description            String?
  image                  String?    @default("https://res.cloudinary.com/df9eayrlw/image/upload/v1735992315/story-icon-png-8_wvpzbr.png")
  chapters               Chapter[]  @relation("StoryToChapter")
  categories             Category[] @relation("StoryToCategory")
  tags                   String[]
  views                  Int        @default(0)
  subscriptionAllowed    Boolean    @default(false)
  numberOfLockedChapters Int?
  subscriptionPrice      Int?
  profile                Profile    @relation("ProfileToStory", fields: [userId], references: [id])
  userId                 String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  @@index([userId])
}

model Category {
  id      String  @id @default(uuid())
  name    String  @unique
  stories Story[] @relation("StoryToCategory")
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean  @default(false)
  story     Story?   @relation("StoryToChapter", fields: [storyId], references: [id])
  storyId   String
  sequence  Int?
  createdAt DateTime @default(now())

  @@index([storyId])
}

model Store {
  id        String      @id @default(uuid())
  storeItem StoreItem[] @relation("StoreToStoreItem")
  profile   Profile     @relation("ProfileToStore", fields: [profileId], references: [id])
  profileId String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model StoreItem {
  id          String   @id @default(uuid())
  title       String
  image       String?
  description String
  price       Int
  pdfLink     String
  thumbnail   String?
  store       Store    @relation("StoreToStoreItem", fields: [storeId], references: [id])
  storeId     String
  createdAt   DateTime @default(now())

  @@index([storeId])
}

model PaymentLink {
  id      String  @id @default(uuid())
  address String
  profile Profile @relation("ProfileToPaymentLink", fields: [userId], references: [id])
  userId  String

  @@index([userId])
}
